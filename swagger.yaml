---
swagger: "2.0"
info:
  description: |
    This is a shop4home API for  a  server.
  version: 1.0.0
  title: Swagger Admin Dashboard
host: localhost:3001
basePath: /api
tags:
- name: auth
  description: Authentication on Users
- name: products
  description: Get a product
schemes:
- https
- http
paths:
  /auth/login:
    post:
      tags:
      - auth
      summary: Logging in to app
      operationId: Login
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Admin object that needs to be logging to the app
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Valid User
  /auth/signup:
    post:
      tags:
      - auth
      summary: Signing in to the app
      operationId: Signup
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Admin object that needs to be signing to the app
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Valid Admin
  /auth/cart:
    get:
      tags:
      - users
      summary: Get all user's cart product from DataBase
      description: This can only be done by the logged in user.
      operationId: getAllcartUser
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: get the users cart items
          schema:
            $ref: '#/definitions/User'
        "400":
          description: can not get the users
    post:
      tags:
      - users
      summary: Post a product to cart
      description: This can only be done by the logged in user.
      operationId: post cart
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created cart product object
        required: true
        schema:
          $ref: '#/definitions/Product'
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        "400":
          description: No user found
  /auth/wish:
    get:
      tags:
      - users
      summary: Get user's wishlist product from DataBase
      description: This can only be done by the logged in user.
      operationId: getWishList
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: get  the users wishlist
          schema:
            $ref: '#/definitions/User'
        "400":
          description: can not get the users
    post:
      tags:
      - users
      summary: Post a product to wishlist
      description: This can only be done by the logged in user.
      operationId: post_wish
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created wishlist product object
        required: true
        schema:
          $ref: '#/definitions/Product'
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        "400":
          description: No user found
  /auth/order:
    post:
      tags:
      - users
      summary: Get user's order product from DataBase
      description: This can only be done by the logged in user.
      operationId: postOrder
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: post user order to sales
          schema:
            $ref: '#/definitions/Sales'
        "400":
          description: can not get the users
  /products:
    get:
      tags:
      - products
      summary: Get all product from DataBase
      description: This can only be done by the logged in admin.
      operationId: getAllProduct
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: get all the products
          schema:
            $ref: '#/definitions/Product'
        "400":
          description: can not get the products
  /products/{_id}:
    get:
      tags:
      - products
      summary: Get a single Product by id
      operationId: getproduct by id
      produces:
      - application/json
      parameters:
      - name: _id
        in: path
        description: get single product object from Database
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Product'
        "400":
          description: Invalid id supplied
        "404":
          description: Product not found
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://localhost:3001/api
    flow: implicit
definitions:
  User:
    type: object
    required:
    - email
    - firstName
    - lastName
    - mobile
    - password
    - username
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
        example: selva
      firstName:
        type: string
        example: selva
      lastName:
        type: string
        example: vignesh
      email:
        type: string
        example: selva@gmail.com
      password:
        type: string
        example: "12345678"
      mobile:
        type: string
        example: "6356789090"
      cart:
        $ref: '#/definitions/Product'
      wish:
        $ref: '#/definitions/Product'
  Cart:
    type: object
    properties:
      products:
        $ref: '#/definitions/Product'
  Sales:
    type: object
    required:
    - cost
    - email
    - username
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
        example: selva
      email:
        type: string
        example: selva@gmail.com
      Products:
        $ref: '#/definitions/Cart'
      cost:
        type: number
        example: 399.0
  Product:
    type: object
    required:
    - category
    - description
    - price
    - productimage
    - stock
    - title
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
        example: table
      description:
        type: string
        example: a home decor
      productimage:
        type: string
        example: https://www.firebase.com/li.jpg
      price:
        type: string
        example: $99.9
      stock:
        type: number
        example: 23.0
      category:
        type: string
        example: decor
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
